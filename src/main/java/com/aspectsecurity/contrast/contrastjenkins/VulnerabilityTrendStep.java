package com.aspectsecurity.contrast.contrastjenkins;

import com.contrastsecurity.http.TraceFilterForm;
import com.contrastsecurity.models.Traces;
import com.contrastsecurity.sdk.ContrastSDK;
import com.google.inject.Inject;
import hudson.AbortException;
import hudson.Extension;
import hudson.model.Run;
import hudson.model.TaskListener;
import hudson.util.ListBoxModel;
import jenkins.model.Jenkins;
import lombok.Getter;
import org.jenkinsci.plugins.workflow.steps.AbstractStepDescriptorImpl;
import org.jenkinsci.plugins.workflow.steps.AbstractStepImpl;
import org.jenkinsci.plugins.workflow.steps.AbstractSynchronousStepExecution;
import org.jenkinsci.plugins.workflow.steps.Step;
import org.jenkinsci.plugins.workflow.steps.StepContextParameter;
import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.DataBoundSetter;
import org.kohsuke.stapler.QueryParameter;

import java.io.IOException;
import java.util.Collections;
import java.util.Map;

@Getter
public class VulnerabilityTrendStep extends AbstractStepImpl {

    private String profile;

    @DataBoundSetter
    public void setProfile(String profile) {
        this.profile = profile;
    }

    private int count;

    @DataBoundSetter
    public void setCount(int count) {
        this.count = count;
    }

    private String rule;

    @DataBoundSetter
    public void setRule(String rule) {
        this.rule = rule;
    }

    private String severity;

    @DataBoundSetter
    public void setSeverity(String severity) {
        this.severity = severity;
    }


    @DataBoundConstructor
    public VulnerabilityTrendStep(String profile, int count, String rule, String severity) {
        this.profile = profile;
        this.count = count;
        this.rule = rule;
        this.severity = severity;
    }

    // Used to build the new instance
    public VulnerabilityTrendStep() {

    }

    @Override
    public VulnerabilityTrendStepDescriptorImpl getDescriptor() {
        Jenkins instance = Jenkins.getInstance();

        if (instance != null) {
            return (VulnerabilityTrendStepDescriptorImpl) instance.getDescriptor(getClass());
        } else {
            return null;
        }
    }

    @Extension
    public static class VulnerabilityTrendStepDescriptorImpl extends AbstractStepDescriptorImpl {

        public VulnerabilityTrendStepDescriptorImpl() {
            super(Execution.class);
        }

        @Override
        public String getFunctionName() {
            return "contrastVerification";
        }

        @Override
        public String getDisplayName() {
            return "Verify vulnerabilities in a build";
        }

        @Override
        public Step newInstance(Map<String, Object> arguments) throws Exception {
            VulnerabilityTrendStep step = new VulnerabilityTrendStep();

            if (arguments.containsKey("profile")) {
                Object profile = arguments.get("profile");

                if (profile != null) {
                    step.setProfile((String) profile);
                } else {
                    throw new IllegalArgumentException("Profile must be set.");
                }
            }

            if (arguments.containsKey("count")) {
                Object count = arguments.get("count");

                if (count != null) {
                    step.setCount((int) count);
                } else {
                    throw new IllegalArgumentException("Count must be set.");
                }
            }

            if (arguments.containsKey("rule")) {
                Object rule = arguments.get("rule");

                step.setRule((String) rule);
            }

            if (arguments.containsKey("severity")) {
                Object severity = arguments.get("severity");

                step.setSeverity((String) severity);
            }

            return step;
        }

        @SuppressWarnings("unused")
        public ListBoxModel doFillProfileItems() {
            return VulnerabilityTrendHelper.getProfileNames();
        }

        @SuppressWarnings("unused")
        public ListBoxModel doFillRuleItems(@QueryParameter("teamServerProfileName") final String teamServerProfileName) throws IOException {
            return VulnerabilityTrendHelper.getVulnerabilityTypes(teamServerProfileName);
        }

        @SuppressWarnings("unused")
        public ListBoxModel doFillSeverityItems() {
            return VulnerabilityTrendHelper.getSeverityListBoxModel();
        }
    }

    public static class Execution extends AbstractSynchronousStepExecution<Void> {
        private static final long serialVersionUID = 1L;

        @StepContextParameter
        transient Run<?, ?> build;

        @StepContextParameter
        transient TaskListener taskListener;

        @Inject
        transient VulnerabilityTrendStep step;

        @Override
        public Void run() throws AbortException {

            TeamServerProfile teamServerProfile = VulnerabilityTrendHelper.getProfile(step.getProfile());

            if (teamServerProfile == null) {
                throw new AbortException("Unable to find TeamServer profile.");
            }

            VulnerabilityTrendHelper.logMessage(taskListener, "Checking the number of vulnerabilities for " + getBuildName());
            ContrastSDK contrastSDK = VulnerabilityTrendHelper.createSDK(teamServerProfile.getUsername(), teamServerProfile.getServiceKey(),
                    teamServerProfile.getApiKey(), teamServerProfile.getTeamServerUrl());
            Traces traces;

            String stepString = step.buildStepString();

            VulnerabilityTrendHelper.logMessage(taskListener, "Checking the step condition where " + stepString);

            try {
                TraceFilterForm filterForm = new TraceFilterForm();
                filterForm.setAppVersionTags(Collections.singletonList(VulnerabilityTrendHelper.buildAppVersionTag(build)));

                if (step.getSeverity() != null) {
                    filterForm.setSeverities(VulnerabilityTrendHelper.getSeverityList(step.getSeverity()));
                }

                if (step.getRule() != null) {
                    filterForm.setVulnTypes(Collections.singletonList(step.getRule()));
                }

                traces = contrastSDK.getTracesInOrg(teamServerProfile.getOrgUuid(), filterForm);
            } catch (Exception e) {
                VulnerabilityTrendHelper.logMessage(taskListener, e.getMessage());
                throw new AbortException("Unable to retrieve vulnerability information from TeamServer.");
            }

            if (traces.getCount() > step.getCount()) {
                throw new AbortException("Failed on the condition where " + stepString);
            }

            VulnerabilityTrendHelper.logMessage(taskListener, "This step has passed successfully");

            return null;
        }

        String getBuildName() {
           return build.getParent().getDisplayName();
        }
    }

    private String buildStepString() {
        StringBuilder sb = new StringBuilder();

        sb.append("count is ").append(count);

        if (severity != null) {
            sb.append(", severity is ").append(severity);
        }

        if (rule != null) {
            sb.append(", rule type is ").append(rule);
        }

        sb.append(".");

        return sb.toString();
    }
}