package com.aspectsecurity.contrast.contrastjenkins;


import com.contrastsecurity.exceptions.UnauthorizedException;
import com.contrastsecurity.http.RuleSeverity;
import com.contrastsecurity.models.AgentType;
import com.contrastsecurity.models.Rules;
import com.contrastsecurity.sdk.ContrastSDK;
import hudson.model.Run;
import hudson.model.TaskListener;
import hudson.util.ListBoxModel;
import org.apache.commons.lang3.StringUtils;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.EnumSet;
import java.util.List;

public class VulnerabilityTrendHelper {

    public static ContrastSDK createSDK(String username, String serviceKey, String apiKey, String teamServerUrl) {
        return new ContrastSDK(username, serviceKey, apiKey, teamServerUrl);
    }

    public static TeamServerProfile getProfile(String profileName) {
        if (profileName == null)
            return null;

        final TeamServerProfile[] profiles = new ContrastPluginConfig.ContrastPluginConfigDescriptor().getTeamServerProfiles();

        // Return the first profile; it is assumed that if it is empty,
        // it's the first element in a drop down that hasn't fully loaded yet
        if (StringUtils.isEmpty(profileName)) {
            return profiles[0];
        }

        for (TeamServerProfile profile : profiles) {
            if (profileName.equals(profile.getName()))
                return profile;
        }
        return null;
    }

    /**
     * Helper method for logging messages.
     *
     * @param listener Listener
     * @param msg      String to log
     */
    public static void logMessage(TaskListener listener, String msg) {
        listener.getLogger().println("[Contrast] - " + msg);
    }

    /**
     * Returns the sublist of severities greater than or equal to the configured severity level
     *
     * @param severity include severity to filter with severity list with
     * @return list of severity strings
     */
    public static EnumSet<RuleSeverity> getSeverityList(String severity) {

        List<String> severityList = SEVERITIES.subList(SEVERITIES.indexOf(severity), SEVERITIES.size());

        List<RuleSeverity> ruleSeverities = new ArrayList<>();

        for (String severityToAdd : severityList) {
            ruleSeverities.add(RuleSeverity.valueOf(severityToAdd.toUpperCase()));
        }

        return EnumSet.copyOf(ruleSeverities);
    }

    /**
     * Retrieves the enabled rules for an organization
     *
     * @param sdk              Contrast SDK object
     * @param organizationUuid uuid of the organization
     */
    public static List<VulnerabilityType> saveRules(ContrastSDK sdk, String organizationUuid) {
        Rules rules;
        List<VulnerabilityType> vulnerabilityTypes = new ArrayList<>();

        try {
            rules = sdk.getRules(organizationUuid);
        } catch (IOException | UnauthorizedException e) {
            return vulnerabilityTypes;
        }

        for (Rules.Rule rule : rules.getRules()) {
            vulnerabilityTypes.add(new VulnerabilityType(rule.getName(), rule.getTitle()));
        }

        return vulnerabilityTypes;
    }


    /**
     * The available severities for the configuration dropdowns
     *
     * @return ListBoxModel of severities
     */
    public static ListBoxModel getSeverityListBoxModel() {
        ListBoxModel items = new ListBoxModel();
        items.add(VulnerabilityTrendHelper.EMPTY_SELECT, null);

        for (String severity : VulnerabilityTrendHelper.SEVERITIES) {
            items.add(severity, severity);
        }

        return items;
    }

    /**
     * The configured profile names for the dropdowns
     *
     * @return ListBoxModel of TeamServer profile names
     */
    public static ListBoxModel getProfileNames() {
        final ListBoxModel model = new ListBoxModel();

        for (TeamServerProfile profile : new ContrastPluginConfig.ContrastPluginConfigDescriptor().getTeamServerProfiles()) {
            model.add(profile.getName(), profile.getName());
        }

        return model;
    }

    /**
     * The vulnerability types for a profile
     *
     * @param teamServerProfileName Name of the profile
     * @return ListBoxModel of vulnerability types
     */
    public static ListBoxModel getVulnerabilityTypes(String teamServerProfileName) {
        ListBoxModel items = new ListBoxModel();

        TeamServerProfile teamServerProfile = VulnerabilityTrendHelper.getProfile(teamServerProfileName);

        items.add(VulnerabilityTrendHelper.EMPTY_SELECT, null);

        if (teamServerProfile != null) {
            for (VulnerabilityType vulnerabilityType : teamServerProfile.getVulnerabilityTypes()) {
                items.add(vulnerabilityType.getTitle(), vulnerabilityType.getName());
            }
        }

        return items;
    }

    /**
     * The available agent types for the configuration dropdown
     *
     * @return ListBoxModel of agent types
     */
    public static ListBoxModel getAgentTypeListBoxModel() {
        ListBoxModel items = new ListBoxModel();

        items.add("Java", AgentType.JAVA.toString());
        items.add(".NET", AgentType.DOTNET.toString());
        items.add("Node", AgentType.NODE.toString());

        return items;
    }

    public static AgentType getAgentTypeFromString(String type) {
        switch (type) {
            case ".NET":
                return AgentType.DOTNET;
            case "Node":
                return AgentType.NODE;
            case "Java":
            default:
                return AgentType.JAVA;
        }
    }

    public static String buildAppVersionTag(Run<?, ?> build) {
        return build.getParent().getDisplayName() + "-" + build.getNumber();
    }

    public static final String EMPTY_SELECT = "None";
    public static final List<String> SEVERITIES = Collections.unmodifiableList(Arrays.asList("Note", "Low", "Medium", "High", "Critical"));
}